// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sentence.Infrastructure;

#nullable disable

namespace Sentence.API.Migrations
{
    [DbContext(typeof(DBContext))]
    partial class DBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Sentence.Domain.Entities.Sentence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sentences");
                });

            modelBuilder.Entity("Sentence.Domain.Entities.Word", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SentenceId")
                        .HasColumnType("int");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WordTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SentenceId");

                    b.HasIndex("WordTypeId");

                    b.ToTable("Words");
                });

            modelBuilder.Entity("Sentence.Domain.Entities.WordType", b =>
                {
                    b.Property<int>("WordTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WordTypeId");

                    b.ToTable("WordTypes");

                    b.HasData(
                        new
                        {
                            WordTypeId = 1,
                            Name = "Noun"
                        },
                        new
                        {
                            WordTypeId = 2,
                            Name = "Verb"
                        },
                        new
                        {
                            WordTypeId = 3,
                            Name = "Adjective"
                        },
                        new
                        {
                            WordTypeId = 4,
                            Name = "Adverb"
                        },
                        new
                        {
                            WordTypeId = 5,
                            Name = "Pronoun"
                        },
                        new
                        {
                            WordTypeId = 6,
                            Name = "Prepositions"
                        },
                        new
                        {
                            WordTypeId = 7,
                            Name = "Conjunction"
                        },
                        new
                        {
                            WordTypeId = 8,
                            Name = "Determiner"
                        },
                        new
                        {
                            WordTypeId = 9,
                            Name = "Exclamation"
                        });
                });

            modelBuilder.Entity("Sentence.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Sentence.Domain.Entities.Word", b =>
                {
                    b.HasOne("Sentence.Domain.Entities.Sentence", null)
                        .WithMany("WordsList")
                        .HasForeignKey("SentenceId");

                    b.HasOne("Sentence.Domain.Entities.WordType", "WordType")
                        .WithMany("Words")
                        .HasForeignKey("WordTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WordType");
                });

            modelBuilder.Entity("Sentence.Domain.Entities.Sentence", b =>
                {
                    b.Navigation("WordsList");
                });

            modelBuilder.Entity("Sentence.Domain.Entities.WordType", b =>
                {
                    b.Navigation("Words");
                });
#pragma warning restore 612, 618
        }
    }
}
